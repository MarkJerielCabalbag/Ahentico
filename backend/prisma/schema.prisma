// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  username String 
  password String 
  ahentes Ahente[]
  productCategories ProductCategory[]
  placeOrders Orders[]
}

model Ahente {
  id Int @id @default(autoincrement())
  name String
  company String?
  contact Int?
  productCoverage String
  addedBy User  @relation(fields: [userId], references: [id])
  userId Int
  products Product[]
  orders Orders[]
}

model ProductCategory {
  id Int @id @default(autoincrement())
  category String 
  addedBy User  @relation(fields: [userId], references: [id])
  userId Int
}

model Product{
  id Int @id @default(autoincrement())
  productName String
  productCategory String
  productUnitMeasurement String
  productUnit Int
  productPricePerUnit Int
  productDescription String
  productDesignatedBy Ahente @relation(fields: [ahenteId], references: [id])
  ahenteId Int
  totalStock Int @default(0)
  productOrdered Order_Items[]
}


model Orders {
    id Int @id @default(autoincrement())
    placeOrderBy User @relation(fields: [userId], references: [id])
    userId Int
    ordersDesignatedTo Ahente @relation(fields: [ahenteId], references: [id])
    ahenteId Int
    status Order_status @default(PENDING)
    createdAt DateTime
    productsOrdered Order_Items[]
}

model Order_Items{
     id Int @id @default(autoincrement())
     listOfOrder Orders @relation(fields: [orderId], references: [id])
     orderId Int
     productOrdered Product @relation(fields: [productId], references: [id])
     productId Int
}


enum Order_status {
PENDING
DELIVERED
CANCELLED
}
